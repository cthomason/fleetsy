// Package myapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /devices/{device_id}/heartbeat)
	PostDevicesDeviceIdHeartbeat(w http.ResponseWriter, r *http.Request, deviceId string)

	// (GET /devices/{device_id}/stats)
	GetDevicesDeviceIdStats(w http.ResponseWriter, r *http.Request, deviceId string)

	// (POST /devices/{device_id}/stats)
	PostDevicesDeviceIdStats(w http.ResponseWriter, r *http.Request, deviceId string)
}

type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (POST /devices/{device_id}/heartbeat)
func (_ Unimplemented) PostDevicesDeviceIdHeartbeat(w http.ResponseWriter, r *http.Request, deviceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (GET /devices/{device_id}/stats)
func (_ Unimplemented) GetDevicesDeviceIdStats(w http.ResponseWriter, r *http.Request, deviceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /devices/{device_id}/stats)
func (_ Unimplemented) PostDevicesDeviceIdStats(w http.ResponseWriter, r *http.Request, deviceId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostDevicesDeviceIdHeartbeat operation middleware
func (siw *ServerInterfaceWrapper) PostDevicesDeviceIdHeartbeat(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "device_id" -------------
	var deviceId string

	err = runtime.BindStyledParameterWithOptions("simple", "device_id", chi.URLParam(r, "device_id"), &deviceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "device_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDevicesDeviceIdHeartbeat(w, r, deviceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetDevicesDeviceIdStats operation middleware
func (siw *ServerInterfaceWrapper) GetDevicesDeviceIdStats(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "device_id" -------------
	var deviceId string

	err = runtime.BindStyledParameterWithOptions("simple", "device_id", chi.URLParam(r, "device_id"), &deviceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "device_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetDevicesDeviceIdStats(w, r, deviceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostDevicesDeviceIdStats operation middleware
func (siw *ServerInterfaceWrapper) PostDevicesDeviceIdStats(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "device_id" -------------
	var deviceId string

	err = runtime.BindStyledParameterWithOptions("simple", "device_id", chi.URLParam(r, "device_id"), &deviceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "device_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostDevicesDeviceIdStats(w, r, deviceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/devices/{device_id}/heartbeat", wrapper.PostDevicesDeviceIdHeartbeat)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/devices/{device_id}/stats", wrapper.GetDevicesDeviceIdStats)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/devices/{device_id}/stats", wrapper.PostDevicesDeviceIdStats)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9SW33PbNgzH/xUetkdVspt2XfS0bGm3PLSXS65PvVyOEWGZnURyBGTP59P/viNpyXLs",
	"7Mc1t61vsgQQXwAfgN5CZVtnDRomKLfgpJctMvr46xJXusKry2vJy+vwJbxUSJXXjrU1UMLVpbALIYWK",
	"poKt8FhrYvRiidLzA0oWa81LyEAHByfjs5EtQgnJ7V4ryMDjb532qKBk32EGVC2xlSEkb1wwJvba1ND3",
	"fTAmZw1h1PnWe+vDQ2UNo+HwKJ1rdCWDzOIzBa3byYnOW4eedfJvqT4VZirpUzS6y4A1N8EqxrzZqYBs",
	"cLYPn7HipPGwUrfoV+hF0tpn8MHyO9sZ9S/rHsL+E+mJA2Esi0WUHG20WdhBvKyieGylboKUzjnr+Qf8",
	"Xbauwbyy7b7nF9dX4jYZQAadDw5LZlcWxXq9zic+xe4cOC6mDjZCGiUq6z1WLOKbFg3H2gUqeYniXYPI",
	"4r00so4fxXtkrysSP1mlTS0uiJAofIEMGl1hKEm5HbR+sAYPRFJZFCQX2GxebGwXE+v3xT2KttM5BE0M",
	"QAYr9JQymeezfBbOsA6NdBpKOMtn+RlkcVRin4s0JlRsx3npi3G8IheW+Hg4b4ZRlJNhXHjbjgMLMa6P",
	"JbtSUMK1JU7tpt30q1/GQNnBfvi0hW89LqCEb4r9Fin2JsXx/ujvEpxI/KNVmy9gn9DwfUp+YX0bnkBJ",
	"xhes2wnUTwzF4D0ZjDHNm6QvQP540bycvTqucsBsl5NYSxKhFg0yKkFdVSHRomuaTWjxq+R+qmpjmGLc",
	"C30Gr2ezv3bYbZSo9iQpxDJt9xpPQsKdN8MCT7aPqfgZH0Nxu7N7HiAOSjz7Airkqr7vXGOluo8cHGXr",
	"Y7aohCQhRbARqkuZisRKLt7WpXjdzmd0jFEGnTt98Mf4Ph3r0FdhEdWYC6xLcf59fn5+DtmEVNs9NBNM",
	"Tdc+oD/C9HE6Y/gJt2NvYkvGtf70Gg8t1sS6opDP/xvp7InNdqFUqPKU2l1Kf2OhPS+7/8EyCxj8CeOh",
	"ewmocAsaaSxhZY0ioVmwtb+Gv2npBCHFSiu0+xjaMNYnUBwkHsaecPgxvt5B+LVu0D4Dind0QuJQZmMr",
	"2Qga7vCDfy7zl2/CRZ7Py+/enJ0V0uliNYf+rv8jAAD//1WRSfJiCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
